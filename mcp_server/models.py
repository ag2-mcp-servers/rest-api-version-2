# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:56:44+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, confloat, constr


class AddParticipantsSearchResult(BaseModel):
    department: Optional[str] = Field(
        None, description='The department of the participant'
    )
    firstName: Optional[str] = Field(
        None, description='The first name of the participant'
    )
    isMember: Optional[bool] = Field(
        None, description='is the participant a member, true or false'
    )
    jobTitle: Optional[str] = Field(
        None, description='The job title of the participant'
    )
    lastName: Optional[str] = Field(
        None, description='The last name of the participant'
    )
    smallImageUri: Optional[str] = Field(
        None, description='The uri of the small picture of the participant'
    )
    tenantId: Optional[str] = Field(
        None, description='the tenant id of the participant'
    )
    userId: Optional[str] = Field(None, description='The id of the participant')


class Attachment(BaseModel):
    creationTime: Optional[float] = Field(
        None, description='The creation time of the attachment.'
    )
    creatorId: Optional[str] = Field(
        None, description='The id of the creator of the attachment.'
    )
    deleteUrl: Optional[str] = Field(
        None, description='The delete URL of the attachment.'
    )
    fileId: Optional[str] = Field(None, description='The id of the attachment file.')
    fileName: Optional[str] = Field(
        None, description='The name of the attachment file.'
    )
    itemId: Optional[str] = Field(
        None, description='The item id to which the attachment is attached.'
    )
    mimeType: Optional[str] = Field(
        None, description='The mime type of the attachment file.'
    )
    modificationTime: Optional[float] = Field(
        None, description='The modification time of the attachment.'
    )
    size: Optional[float] = Field(None, description='The size of the attachment file.')
    url: Optional[str] = Field(None, description='The URL of the attachment.')


class BridgeNumber(BaseModel):
    bridgeNumber: Optional[str] = Field(
        None,
        description='The number that has to be called to join the real time session of a conversation',
    )
    country: Optional[str] = Field(
        None, description='The country where the bridge is hosted'
    )
    isMostUsed: Optional[bool] = Field(None, description='Is most used')
    locale: Optional[str] = Field(None, description='The locale of the bridge')
    name: Optional[str] = Field(None, description='The name / identifier of the bridge')
    type: Optional[str] = Field(
        None,
        description='Information of the billing for the call, i.e. if the caller has to pay or not for the call',
    )


class Conversation(BaseModel):
    avatar: Optional[str] = Field(
        None, description='The URL of the small avatar image of the conversation'
    )
    avatarLarge: Optional[str] = Field(
        None, description='The URL of the large avatar image of the conversation'
    )
    convId: Optional[str] = Field(None, description='The ID of the conversation')
    creationTime: Optional[float] = Field(
        None, description='UTC timestamp when the conversation was created'
    )
    creatorId: Optional[str] = Field(
        None, description='The ID of the user who created the conversation'
    )
    creatorTenantId: Optional[str] = Field(
        None,
        description='The ID of the Circuit domain (tenant) where the creator of the conversation belongs to',
    )
    description: Optional[str] = Field(
        None,
        description='The description of the conversation. This field is available only for conversations with type COMMUNITY',
    )
    isGuestAccessDisabled: Optional[bool] = Field(
        None,
        description='Indicates whether guest access to the conversation is disabled or not',
    )
    isModerated: Optional[bool] = Field(
        None,
        description='Indicates whether the conversation is moderated or not. In a moderated conversation only participants who have been assigned the role of a moderator are allowed to add or remove participants into the conversation',
    )
    modificationTime: Optional[float] = Field(
        None,
        description='UTC timestamp when the conversation was modified. A conversation is modified when any of the conversation object fields change but not when conversation items are added or edited',
    )
    participants: Optional[List[str]] = Field(
        None, description='Array of active participants'
    )
    topic: Optional[str] = Field(
        None,
        description='The title of the conversation. Conversations of type DIRECT cannot have a title',
    )
    topicPlaceholder: Optional[str] = Field(
        None,
        description='The title of the conversation. Conversations of type DIRECT cannot have a title',
    )
    type: Optional[str] = Field(
        None,
        description='The type of the conversation. It can be one of the following: DIRECT, GROUP, COMMUNITY or LARGE',
    )


class ConversationDetails(BaseModel):
    bridgeNumbers: Optional[List[BridgeNumber]] = Field(
        None,
        description='A list of bridge numbers which can be used to dial in to the real time session via phone',
    )
    convId: Optional[str] = Field(None, description='missing documentation')
    conversationCreatorId: Optional[str] = Field(
        None, description='The user ID of the conversation creator'
    )
    isModerationAllowed: Optional[bool] = Field(
        None, description='Indicates if the conversation is allowed to be moderated'
    )
    isRecordingAllowed: Optional[bool] = Field(
        None, description='Indicates if the conversation is allowed to be recorded'
    )
    link: Optional[str] = Field(
        None, description='A link that can be used in a browser to join the session'
    )
    pin: Optional[str] = Field(
        None, description='The PIN to join a real time session via phone'
    )


class ConversationParticipant(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The display name of the participant.'
    )
    firstName: Optional[str] = Field(
        None, description='The first name of the participant.'
    )
    isDeleted: Optional[bool] = Field(
        None, description='If the participant is deleted.'
    )
    largeImageUri: Optional[str] = Field(
        None, description='The large image uri of the participant.'
    )
    lastName: Optional[str] = Field(
        None, description='The last name of the participant.'
    )
    smallImageUri: Optional[str] = Field(
        None, description='The small image uri of the participant;'
    )
    type: Optional[str] = Field(None, description='The type of the participant')
    userId: Optional[str] = Field(
        None, description='The unique user id of the participant.'
    )


class ConversationParticipantsList(BaseModel):
    hasMore: Optional[bool] = Field(
        None,
        description='are more results available, then start another search with finer query',
    )
    participantList: Optional[List[ConversationParticipant]] = Field(
        None, description='list of participants'
    )
    searchPointer: Optional[str] = Field(None, description='pointer for stored search ')


class ConversationSearchResultItem(BaseModel):
    convId: Optional[str] = Field(
        None,
        description='The ID of the conversation to which the matching items belong.',
    )
    itemIds: Optional[List[str]] = Field(
        None,
        description='The conversation items which contain the search result. The list maybe empty in case a hit was found for the conversation related data like topic or participants.',
    )


class ConversationsPage(BaseModel):
    conversationList: Optional[List[Conversation]] = Field(
        None, description='List of conversations'
    )
    hasMore: Optional[Any] = Field(None, description='Has more pages of conversations')
    nextPagePointer: Optional[str] = Field(
        None, description='Pointer to the next set page of conversations'
    )


class GetSpacesResult(RootModel[Any]):
    root: Any


class IncomingWebhook(BaseModel):
    conversationId: Optional[str] = Field(
        None, description='The conversation where the posts go to'
    )
    creationTime: Optional[float] = Field(
        None, description='Milliseconds since 1.1.1900 when the hook was created'
    )
    creatorId: Optional[str] = Field(
        None, description='Th e user who created the webhook'
    )
    description: Optional[str] = Field(
        None, description='A short plain text to describe the webhook'
    )
    modificationTime: Optional[float] = Field(
        None, description='Milliseconds since 1.1.1900 when the hook was modified'
    )
    name: Optional[str] = Field(None, description='A name to identify the webhook')
    status: Optional[str] = Field(
        None,
        description='Status may be ENABLED or DISABLED. A disabled hook cannot be used',
    )
    tenantId: Optional[str] = Field(
        None, description='The tenant where the conversation and users belong to'
    )
    url: Optional[str] = Field(
        None, description='The url where the webhokk can be used'
    )
    userId: Optional[str] = Field(
        None, description='The user who will occur as author of the posts'
    )
    webhookId: Optional[str] = Field(None, description='Unique id of the webhook')


class IncomingWebhookSlackMessage(BaseModel):
    fileURL: Optional[str] = Field(None, description='missing documentation')
    filename: Optional[str] = Field(None, description='missing documentation')
    markdown: Optional[bool] = Field(None, description='missing documentation')
    subject: Optional[str] = Field(None, description='missing documentation')
    text: Optional[str] = Field(
        None,
        description='The text which will occur in the conversation. May contain formats like *bold* or _italic_',
    )


class Label(BaseModel):
    labelId: Optional[str] = Field(None, description='The unique ID of the label')
    value: Optional[str] = Field(None, description='The clear text value')


class LabelIds(BaseModel):
    labelIds: Optional[List[str]] = Field(None, description='A list of label ids.')


class Participant(BaseModel):
    creationTime: Optional[float] = Field(
        None, description='Time when the participant was added to the space'
    )
    labelIds: Optional[List[str]] = Field(
        None,
        description='The list of label IDs of all the labels assigned to the space.',
    )
    lastContentCreationTime: Optional[float] = Field(
        None, description='Time stamp when user last created content in the space.'
    )
    lastReadTimestamp: Optional[float] = Field(
        None, description='Last time stamp when the user read content in this space.'
    )
    modificationTime: Optional[float] = Field(
        None, description='Time when the participant was changed last.'
    )
    numberOfReplies: Optional[float] = Field(
        None, description='Number of replies in the space created by this participant.'
    )
    numberOfTopics: Optional[float] = Field(
        None, description='Number of topics in the space created by this participant.'
    )
    role: Optional[str] = Field(
        None, description='The name of the role of the participant.'
    )
    spaceId: Optional[str] = Field(
        None, description='The unique ID of the space to which the participant.'
    )
    state: Optional[str] = Field(
        None, description='The name of the state of the participant;'
    )
    tenantId: Optional[str] = Field(
        None, description='The unique tenant id of the participant.'
    )
    userId: Optional[str] = Field(
        None, description='The unique user id of the participant.'
    )


class ParticipantAddResult(RootModel[Any]):
    root: Any


class ParticipantSearchResult(BaseModel):
    creationTime: Optional[float] = Field(
        None, description='Time when the participant was added to the space'
    )
    firstName: Optional[str] = Field(
        None, description='The first name of the participant'
    )
    lastName: Optional[str] = Field(
        None, description='The last name of the participant'
    )
    modificationTime: Optional[float] = Field(
        None, description='Time when the participant was changed last.'
    )
    numberOfReplies: Optional[float] = Field(
        None, description='Number of replies in the space created by this participant.'
    )
    numberOfTopics: Optional[float] = Field(
        None, description='Number of topics in the space created by this participant.'
    )
    role: Optional[str] = Field(
        None, description='The name of the role of the participant'
    )
    smallImageUri: Optional[str] = Field(
        None, description='The uri of the small picture of the participant'
    )
    state: Optional[str] = Field(
        None, description='The name of the state of the participant'
    )
    tenantId: Optional[str] = Field(
        None, description='the tenant id of the participant'
    )
    userId: Optional[str] = Field(None, description='The id of the participant')


class ParticipantSearchResultLarge(BaseModel):
    creationTime: Optional[float] = Field(
        None, description='Time when the participant was added to the space'
    )
    department: Optional[str] = Field(
        None, description='The department of the participant'
    )
    firstName: Optional[str] = Field(
        None, description='The first name of the participant'
    )
    isMember: Optional[bool] = Field(
        None, description='Is the participant a member of the space'
    )
    jobDescription: Optional[str] = Field(
        None, description='The job description of the participant'
    )
    lastContentCreationTime: Optional[float] = Field(
        None, description='The last time the participant created content.'
    )
    lastName: Optional[str] = Field(
        None, description='The last name of the participant'
    )
    modificationTime: Optional[float] = Field(
        None, description='Time when the participant was changed last.'
    )
    numberOfReplies: Optional[float] = Field(None, description='The number of replies')
    numberOfTopics: Optional[float] = Field(None, description='The number of topics')
    reason: Optional[str] = Field(None, description='The reason of it all (42)')
    role: Optional[str] = Field(
        None, description='The name of the role of the participant'
    )
    smallImageUri: Optional[str] = Field(
        None, description='The uri of the small picture of the participant'
    )
    spaceId: Optional[str] = Field(None, description='The id of the space')
    state: Optional[str] = Field(None, description='The name of the state ')
    tenantId: Optional[str] = Field(
        None, description='the tenant id of the participant'
    )
    userId: Optional[str] = Field(None, description='The id of the participant')


class ParticipantSpaceWrapper(RootModel[Any]):
    root: Any


class ParticipantsImportDataResult(BaseModel):
    actualNumberOfImportedParticipants: Optional[float] = Field(
        None, description='Actual number of imported participants'
    )
    estimatedImportDuration: Optional[float] = Field(
        None, description='Estimated import duration'
    )
    importEndDate: Optional[float] = Field(None, description='Import end date')
    importFileId: Optional[str] = Field(None, description='The file id of the import')
    importFileName: Optional[str] = Field(
        None, description='The name of the import file'
    )
    importProgress: Optional[float] = Field(
        None, description='The progress of the import'
    )
    importStartDate: Optional[float] = Field(None, description='Import start date')
    importStatus: Optional[str] = Field(None, description='The status of the import')
    plannedNumberOfImportedParticipants: Optional[float] = Field(
        None, description='Planned number of imported participants'
    )
    resultFileId: Optional[str] = Field(
        None, description='The file id of the result file'
    )
    resultFileName: Optional[str] = Field(
        None, description='The name of the result file'
    )


class ParticipantsLike(BaseModel):
    firstName: Optional[str] = Field(None, description='The first name of the user')
    largeImageUri: Optional[str] = Field(
        None, description='The large image uri of the user'
    )
    lastName: Optional[str] = Field(None, description='The last name of the user')
    smallImageUri: Optional[str] = Field(
        None, description='The small image uri of the user'
    )
    userId: Optional[str] = Field(None, description='The id of the user')


class ParticipantsLikeResult(BaseModel):
    hasMore: Optional[bool] = Field(
        None,
        description='More results available (true-use searchpointer for next search/false)',
    )
    participants: Optional[List[ParticipantsLike]] = Field(
        None, description='A list of participants who like the topic'
    )
    searchPointer: Optional[str] = Field(None, description='The searchpointer')


class ParticipantsSearchResult(BaseModel):
    hasMore: Optional[bool] = Field(
        None, description='are more results available, than start another search'
    )
    participants: Optional[List[ParticipantSearchResult]] = Field(
        None, description='list of participants'
    )
    searchPointer: Optional[str] = Field(None, description='pointer for stored search ')


class ParticipantsSearchResultLarge(BaseModel):
    hasMore: Optional[bool] = Field(
        None,
        description='are more results available, then start another search with finer query',
    )
    participants: Optional[List[ParticipantSearchResultLarge]] = Field(
        None, description='list of participants'
    )
    searchPointer: Optional[str] = Field(None, description='pointer for stored search ')


class PinnedTopic(BaseModel):
    conversationId: Optional[str] = Field(None, description='"ID of the conversation"')
    conversationItemId: Optional[str] = Field(
        None, description='"ID of the pinned topic"'
    )
    pinnedTime: Optional[float] = Field(
        None, description='"The exact moment the Pinning was happening"'
    )


class Presence(BaseModel):
    dndUntil: Optional[float] = Field(
        None, description='Timestamp until the DND state of the user is active'
    )
    isOptedOut: Optional[bool] = Field(
        None, description='Indicates whether the user has opted out of their presence'
    )
    latitude: Optional[float] = Field(
        None, description='The latitude of the geo location of the user'
    )
    locationText: Optional[str] = Field(
        None, description='The geo location of the user in clear text'
    )
    longitude: Optional[float] = Field(
        None, description='The longitude of the geo location of the user'
    )
    mobile: Optional[bool] = Field(
        None,
        description='Identifies whether the presence state is based on the state information of a mobile device or not',
    )
    poor: Optional[bool] = Field(None, description='n/a')
    state: Optional[str] = Field(
        None,
        description='The presence state of the user. It can be one of the following: AVAILABLE, OFFLINE, AWAY, BUSY, or DND (Do-Not-Disturb)',
    )
    statusMessage: Optional[str] = Field(
        None, description='A free formed status message of the user'
    )
    timeZoneOffset: Optional[float] = Field(
        None, description='The timezone offset of the user compared to UTC'
    )
    userId: Optional[str] = Field(None, description='The ID of the user')


class Preview(BaseModel):
    imageURI: Optional[str] = Field(None, description='n/a')
    srcURL: Optional[str] = Field(None, description='n/a')
    title: Optional[str] = Field(None, description='n/a')
    type: Optional[str] = Field(None, description='n/a')


class RtcEnded(BaseModel):
    duration: Optional[float] = Field(None, description='The duration of the call.')
    maxNumberOfAttendees: Optional[float] = Field(
        None, description='The maximum number of attendees during a call.'
    )
    pickFromParticipant: Optional[str] = Field(
        None, description='UserID of the pick from participant.'
    )


class RtcMoved(BaseModel):
    conversationId: Optional[str] = Field(
        None, description='ID of the conversation moved from or to.'
    )
    direction: Optional[str] = Field(None, description='Moved from or to conversation.')


class RtcParticipant(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The display name of the participant.'
    )
    fullyQualifiedNumber: Optional[str] = Field(
        None, description='missing documentation'
    )
    phoneNumber: Optional[str] = Field(None, description='missing documentation')
    resolvedUser: Optional[Any] = Field(None, description='missing documentation')
    type: Optional[str] = Field(None, description='The RTC type of the participant.')
    userId: Optional[str] = Field(None, description='The ID of the participant.')


class SharedItem(BaseModel):
    containerId: Optional[str] = Field(None, description='The Id of the container')
    containerName: Optional[str] = Field(None, description='Name of the container')
    containerType: Optional[str] = Field(None, description='Type of the container')
    creationTime: Optional[float] = Field(
        None, description='The time this Item has been created'
    )
    creatorId: Optional[str] = Field(None, description='The Id of the creator')
    itemId: Optional[str] = Field(None, description='Id of the item')
    parentTopicId: Optional[str] = Field(None, description='The Id of the parent topic')
    subType: Optional[str] = Field(None, description='The subtype')


class Space(BaseModel):
    accessModeType: Optional[str] = Field(
        None, description='The name of the access mode type of the space.'
    )
    creationTime: Optional[float] = Field(None, description='The space creation time.')
    creatorId: Optional[str] = Field(None, description='The ID of the space creator.')
    defaultRole: Optional[str] = Field(
        None, description='The name of the default role of a new participant.'
    )
    description: Optional[str] = Field(None, description='The space description.')
    largePictureBase64: Optional[str] = Field(
        None,
        description='Base64 encoded image that can be set during the creation and the update of a space.',
    )
    largePictureContentType: Optional[str] = Field(
        None, description='The content type of the image.'
    )
    largePictureId: Optional[str] = Field(
        None, description='The file id of the large version of the picture.'
    )
    lastContentCreationTime: Optional[float] = Field(
        None,
        description='Time stamp when the last content (topic / reply) was created within this space.',
    )
    lastContentCreatorId: Optional[str] = Field(
        None, description='User ID of the user which created the last content.'
    )
    modificationTime: Optional[float] = Field(
        None, description='The space modification time.'
    )
    name: Optional[str] = Field(None, description='The unique space name.')
    numberOfExternalParticipants: Optional[float] = Field(
        None, description='Number of external participants in the space.'
    )
    numberOfParticipants: Optional[float] = Field(
        None, description='Number of participants in the space.'
    )
    numberOfPinnedTopics: Optional[float] = Field(
        None, description='Number of pinned topics in the space.'
    )
    numberOfReplies: Optional[float] = Field(
        None, description='Number of replies in the space.'
    )
    numberOfTopics: Optional[float] = Field(
        None, description='Number of topics in the space.'
    )
    ownerId: Optional[str] = Field(None, description='The ID of the space owner.')
    smallPictureBase64: Optional[str] = Field(
        None,
        description='Base64 encoded image that can be set during the creation and the update of a space.',
    )
    smallPictureContentType: Optional[str] = Field(
        None, description='The content type of the image.'
    )
    smallPictureId: Optional[str] = Field(
        None, description='The file id of the small version of the picture.'
    )
    spaceId: Optional[str] = Field(
        None,
        description='The unique space ID generated by the backend during the creation of the space.',
    )
    status: Optional[str] = Field(
        None, description='The name of the status of the space.'
    )
    tags: Optional[List[str]] = Field(None, description='The list of space tags.')
    tenantId: Optional[str] = Field(None, description='The ID of the space tenant.')
    type: Optional[str] = Field(None, description='The name of the space type.')


class SpaceAttachment(BaseModel):
    creationTime: Optional[float] = Field(
        None, description='time this item has been created'
    )
    creatorId: Optional[str] = Field(None, description='the id of the creator')
    fileId: Optional[str] = Field(None, description='the id of the field')
    fileName: Optional[str] = Field(None, description='name of the file')
    inlineUsage: Optional[bool] = Field(None, description='is inline usage allowed')
    itemId: Optional[str] = Field(None, description='id of the item')
    layout: Optional[str] = Field(None, description='layout')
    mimeType: Optional[str] = Field(None, description='the media type')
    modificationTime: Optional[float] = Field(
        None, description='the time this item has been ben modified'
    )
    size: Optional[float] = Field(None, description='size of this file')
    spaceId: Optional[str] = Field(None, description='id of the space')
    thumbnailId: Optional[str] = Field(None, description='the id of the tumbnail')


class SpaceExternalAttachment(BaseModel):
    attachment: Optional[SpaceAttachment] = None
    downloadLocation: Optional[str] = Field(
        None, description='the location of the download'
    )
    previewLocation: Optional[str] = Field(
        None, description='the location of the preview'
    )
    shareLinkToken: Optional[str] = Field(None, description='The share link token')
    type: Optional[str] = Field(None, description='the type')


class SpaceItemPreview(BaseModel):
    description: Optional[str] = Field(
        None, description='The description of this preview'
    )
    html: Optional[str] = Field(None, description='Html code')
    imageURI: Optional[str] = Field(None, description='The URI of the image')
    provider: Optional[str] = Field(None, description='the provider')
    srcURL: Optional[str] = Field(None, description='The URL of the source')
    title: Optional[str] = Field(None, description='The title of this preview')
    type: Optional[str] = Field(None, description='The type of this preview')


class SpacePinnedTopic(BaseModel):
    position: Optional[float] = Field(
        None, description='The position of a pinned topic'
    )
    subject: Optional[str] = Field(None, description='The subject of a pinned topic')
    topicId: Optional[str] = Field(None, description='The id of a pinned topic')


class SpaceSearchResultDetailed(BaseModel):
    fileIds: Optional[List[str]] = Field(None, description='=The list of file ids')
    itemIds: Optional[List[str]] = Field(None, description='=The list of items ids')
    spaceId: Optional[str] = Field(None, description='The id of the space')
    status: Optional[str] = Field(
        None,
        description='The status of the search (NORESULT, ERROR, TIMEOUT, MORERESULT)',
    )


class SpaceSearchResultDetailedBack(BaseModel):
    resList: Optional[List[SpaceSearchResultDetailed]] = Field(
        None,
        description='A list of v2restspacesearchresultdetailedback containing spaceId, item ids and file ids',
    )


class SpacesSearchTerm(BaseModel):
    endTime: Optional[Any] = Field(None, description='The end time')
    scope: Optional[str] = Field(None, description='The scope of the search')
    searchTerm: Optional[str] = Field(None, description='The search term')
    startTime: Optional[Any] = Field(None, description='The start time')


class SpacesSearchTermResult(BaseModel):
    resList: Optional[List[SpacesSearchTerm]] = Field(
        None, description='A list of space search terms.'
    )


class String(BaseModel):
    CASE_INSENSITIVE_ORDER: Optional[Any] = None


class SupportInfo(BaseModel):
    supportEmailAddress: Optional[str] = Field(
        None, description='The email address of the support'
    )
    supportType: Optional[Any] = Field(
        None, description='The type of support (a number)'
    )


class SystemItem(BaseModel):
    affectedParticipants: Optional[List[str]] = Field(
        None,
        description='List off affected participants (user ID of the Circuit user) in case the item type PARTICIPANT_ADDED or PARTICIPANT_REMOVED',
    )
    newTopic: Optional[str] = Field(
        None,
        description='Filled with the new topic of a conversation if the type of the item is CONVERSATION_RENAMED.',
    )
    oldTopic: Optional[str] = Field(
        None,
        description='Filled with the previous topic of a conversation if the type of the item is CONVERSATION_RENAMED.',
    )
    type: Optional[str] = Field(None, description='The type of the system item')


class UserEmailAddress(BaseModel):
    address: Optional[str] = Field(None, description='the email address')
    type: Optional[str] = Field(None, description='the type of the email address')


class UserPhoneNumber(BaseModel):
    phoneNumber: Optional[str] = Field(None, description='the phone number')
    type: Optional[str] = Field(None, description='the type of the phone number')


class V2DistributedClientInfo(BaseModel):
    clientId: Optional[str] = Field(None, description='The client id')
    clientVersion: Optional[str] = Field(None, description='The version of the client')
    deviceSubtype: Optional[str] = Field(None, description='The device sub type')
    deviceType: Optional[str] = Field(None, description='The devicetype')
    hardwareModel: Optional[str] = Field(None, description='The hardware model')
    homeNode: Optional[str] = Field(None, description='The home node name')
    manufacturer: Optional[str] = Field(None, description='The manufacturer')
    osVersion: Optional[str] = Field(
        None, description='The version of the operating system'
    )
    userId: Optional[str] = Field(None, description='The user id')


class WebHook(BaseModel):
    creationTime: Optional[float] = Field(
        None,
        description='The time when this WebHook was created. This does not necessary mean the time when an manifest file was created.',
    )
    filter: Optional[List[str]] = Field(
        None, description='An optional list of filter parameters for this webhook.'
    )
    id: Optional[str] = Field(
        None,
        description='The unique identifier for this webhook. Can be used later to unregister the webhook.',
    )
    subscriptionIds: Optional[List[str]] = Field(
        None,
        description='The optional list of userids for which this webhook is subscribed, i.e. presence events for the user are forwarded to the WebHook callback URL.',
    )
    type: Optional[str] = Field(
        None,
        description='The type of a WebHook. This can either be MANUAL or EXTENSION. While manual WebHooks are only temporary and for development only use, permanent ones (EXTENSION) will bemanaged by the system.',
    )
    url: Optional[str] = Field(None, description='The callback URL of this webhook.')
    userId: Optional[str] = Field(
        None,
        description='The user ID for which this webhook is subscribed, i.e. events for this user are forwarded to the WebHook callback URL.',
    )


class Direction(Enum):
    BEFORE = 'BEFORE'
    AFTER = 'AFTER'


class ConversationsGetResponse(RootModel[List[Conversation]]):
    root: List[Conversation]


class ConversationsByIdsGetResponse(RootModel[List[Conversation]]):
    root: List[Conversation]


class ConvIds(RootModel[List[constr(max_length=2048)]]):
    root: List[constr(max_length=2048)]


class Sort(Enum):
    ALPHABETICALLY = 'ALPHABETICALLY'
    RECENT_ACTIVITY = 'RECENT_ACTIVITY'
    POPULARITY = 'POPULARITY'


class Order(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class ConversationsCommunityGetResponse(RootModel[List[Conversation]]):
    root: List[Conversation]


class ConversationsCommunityPostRequest(BaseModel):
    description: Optional[constr(max_length=2048)] = Field(
        None, description='An optional description for the community conversation'
    )
    participants: Optional[List[constr(max_length=2048)]] = Field(
        None,
        description='list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added',
    )
    topic: constr(max_length=2048) = Field(
        ...,
        description='An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)',
    )


class ConversationsCommunityConvIdPutRequest(BaseModel):
    description: Optional[constr(max_length=2048)] = Field(
        None, description='An optional description for the community conversation'
    )
    topic: Optional[constr(max_length=2048)] = Field(
        None,
        description='An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)',
    )


class Participants(RootModel[List[constr(max_length=6500)]]):
    root: List[constr(max_length=6500)]


class ConversationsCommunityConvIdParticipantsPostRequest(BaseModel):
    participants: List[constr(max_length=6500)] = Field(
        ...,
        description='The IDs or the unique email addresses of the Circuit users that should to be added.',
    )


class ConversationsConversationdetailsGetResponse(RootModel[List[ConversationDetails]]):
    root: List[ConversationDetails]


class ConversationsDirectPostRequest(BaseModel):
    participant: constr(max_length=2048) = Field(
        ...,
        description='The participant that will be part of this conversation together with the creator, specified by the Circuit user ID or the unique email address',
    )


class ConversationsFavoriteGetResponse(RootModel[List[String]]):
    root: List[String]


class ConversationsGroupPostRequest(BaseModel):
    participants: List[constr(max_length=2048)] = Field(
        ...,
        description='A list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added',
    )
    topic: Optional[constr(max_length=2048)] = Field(
        None,
        description='An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)',
    )


class ConversationsGroupConvIdPutRequest(BaseModel):
    topic: Optional[constr(max_length=2048)] = Field(
        None,
        description='An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)',
    )


class ConversationsGroupConvIdParticipantsPostRequest(BaseModel):
    participants: List[constr(max_length=6500)] = Field(
        ...,
        description='The IDs or the unique email addresses of the Circuit users that should to be added.',
    )


class Scope(Enum):
    FILES = 'FILES'
    PEOPLE = 'PEOPLE'
    MEMBERS = 'MEMBERS'
    MESSAGES = 'MESSAGES'
    SENTBY = 'SENTBY'
    ALL = 'ALL'
    CONVERSATIONS = 'CONVERSATIONS'
    LABEL = 'LABEL'
    FILTER = 'FILTER'


class ConversationsConvIdLabelPostRequest(BaseModel):
    label: constr(max_length=2048) = Field(..., description='The actual label ')


class ConversationsConvIdMessagesPostRequest(BaseModel):
    attachments: Optional[List[constr(max_length=16000)]] = Field(
        None, description='A comma separated list of attachment IDs from the file API.'
    )
    content: Optional[constr(max_length=16384)] = Field(
        None,
        description='The actual content of the item, is mandatory unless an attachment is added',
    )
    formMetaData: Optional[constr(max_length=32768)] = Field(
        None, description='The form meta data of the new text item'
    )
    subject: Optional[constr(max_length=255)] = Field(
        None, description='The subject (headline) of the new text item'
    )


class ConversationsConvIdMessagesItemIdPostRequest(BaseModel):
    attachments: Optional[List[constr(max_length=4096)]] = Field(
        None, description='A comma separated list of attachment IDs from the file API.'
    )
    content: Optional[constr(max_length=16384)] = Field(
        None, description='The actual content of the item'
    )
    formMetaData: Optional[constr(max_length=32768)] = Field(
        None, description='The form meta data of the new text item'
    )
    subject: Optional[constr(max_length=255)] = Field(
        None, description='The subject (headline) of the new text item'
    )


class ConversationsConvIdMessagesItemIdPutRequest(BaseModel):
    attachments: Optional[List[constr(max_length=16000)]] = Field(
        None, description='A comma separated list of attachment IDs from the file API.'
    )
    content: Optional[constr(max_length=16384)] = Field(
        None, description='The actual content of the item'
    )
    formMetaData: Optional[constr(max_length=32768)] = Field(
        None, description='The form meta data of the new text item'
    )
    subject: Optional[constr(max_length=255)] = Field(
        None, description='The subject (headline) of the new text item'
    )


class ConversationsConvIdMessagesItemIdFlagPostRequest(BaseModel):
    itemCreationTime: Optional[constr(max_length=2048)] = Field(
        None, description='The time when the item was created'
    )
    parentId: Optional[constr(max_length=2048)] = Field(
        None, description="The ID of the item's parent"
    )


class ConversationsConvIdModeratorsDeleteRequest(BaseModel):
    moderators: List[constr(max_length=6500)] = Field(
        ..., description='The list of moderator ids to remove'
    )


class ConversationsConvIdModeratorsPostRequest(BaseModel):
    moderators: List[constr(max_length=6500)] = Field(
        ..., description='The list of moderator ids to add '
    )


class Type(Enum):
    REGULAR = 'REGULAR'
    MODERATOR = 'MODERATOR'
    GUEST = 'GUEST'
    FORMER = 'FORMER'
    BOT = 'BOT'


class ConversationsConvIdParticipantsGetResponse(
    RootModel[List[ConversationParticipantsList]]
):
    root: List[ConversationParticipantsList]


class ConversationsConvIdPinsGetResponse(RootModel[List[PinnedTopic]]):
    root: List[PinnedTopic]


class AccessModeType(Enum):
    INTERNAL_ONLY = 'INTERNAL_ONLY'
    INTERNAL_EXTERNAL = 'INTERNAL_EXTERNAL'


class Role(Enum):
    MODERATOR = 'MODERATOR'
    AUTHOR = 'AUTHOR'
    PARTICIPANT = 'PARTICIPANT'
    READER = 'READER'


class Status(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class Type2(Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    SECRET = 'SECRET'


class SpacesCreatePostRequest(BaseModel):
    accessModeType: AccessModeType = Field(..., description='Access mode')
    description: Optional[constr(max_length=2048)] = Field(
        None, description='description of the space'
    )
    largePictureBase64: Optional[constr(max_length=256000)] = Field(
        None, description='large picture'
    )
    name: constr(max_length=2048) = Field(..., description='name of the space')
    role: Role = Field(..., description='role')
    smallPictureBase64: Optional[constr(max_length=256000)] = Field(
        None, description='small picture'
    )
    status: Status = Field(..., description='status')
    tags: Optional[List[constr(max_length=2048)]] = Field(
        None, description='tags of the space'
    )
    type: Type2 = Field(..., description='type')


class SortBy(Enum):
    LAST_CONTENT = 'LAST_CONTENT'
    NAME = 'NAME'
    NUMBER_OF_USERS = 'NUMBER_OF_USERS'
    CREATION_DATE = 'CREATION_DATE'


class SortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class Filter(Enum):
    NONE = 'NONE'
    JOINED = 'JOINED'
    REQUESTED = 'REQUESTED'
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    NOT_JOINED_REQUESTED = 'NOT_JOINED_REQUESTED'


class SearchDirection(Enum):
    BEFORE = 'BEFORE'
    AFTER = 'AFTER'


class Ids(RootModel[List[constr(max_length=2048)]]):
    root: List[constr(max_length=2048)]


class Scope2(Enum):
    ALL = 'ALL'
    SPACES = 'SPACES'
    TOPICBY = 'TOPICBY'
    FILES = 'FILES'
    TAGS = 'TAGS'
    LABELS = 'LABELS'
    DATE = 'DATE'


class SpacesSearchAddRecentPutRequest(BaseModel):
    endTime: Optional[datetime] = Field(None, description='The end time.')
    scope: Scope2 = Field(..., description='The scope of the search.')
    searchTerm: constr(max_length=2048) = Field(
        ..., description='The term to search for.'
    )
    startTime: Optional[datetime] = Field(None, description='The start time.')


class SpacesSearchRecentGetResponse(RootModel[List[SpacesSearchTermResult]]):
    root: List[SpacesSearchTermResult]


class PrioritySpaces(RootModel[List[constr(max_length=2048)]]):
    root: List[constr(max_length=2048)]


class SpacesSearchStartDetailedGetResponse(
    RootModel[List[SpaceSearchResultDetailedBack]]
):
    root: List[SpaceSearchResultDetailedBack]


class SpacesTopicTopicIdUpdateTagsPutRequest(BaseModel):
    tags: List[constr(max_length=2048)] = Field(..., description='The tags to update')


class AccessModeType1(Enum):
    INTERNAL_ONLY = 'INTERNAL_ONLY'
    INTERNAL_EXTERNAL = 'INTERNAL_EXTERNAL'
    NO_CHANGE = 'NO_CHANGE'


class Role1(Enum):
    MODERATOR = 'MODERATOR'
    AUTHOR = 'AUTHOR'
    PARTICIPANT = 'PARTICIPANT'
    READER = 'READER'
    NO_CHANGE = 'NO_CHANGE'


class Type3(Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    SECRET = 'SECRET'
    NO_CHANGE = 'NO_CHANGE'


class SpacesIdPutRequest(BaseModel):
    accessModeType: Optional[AccessModeType1] = Field(
        'NO_CHANGE', description='Access mode'
    )
    description: Optional[constr(max_length=2048)] = Field(
        None, description='description of the space'
    )
    largePictureBase64: Optional[constr(max_length=256000)] = Field(
        None, description='large picture'
    )
    name: Optional[constr(max_length=2048)] = Field(
        None, description='name of the space'
    )
    ownerId: Optional[constr(max_length=2048)] = Field(
        None, description='ownerid of the space'
    )
    role: Optional[Role1] = Field('NO_CHANGE', description='role')
    smallPictureBase64: Optional[constr(max_length=256000)] = Field(
        None, description='small picture'
    )
    status: Optional[Status] = Field('ENABLED', description='status')
    tags: Optional[List[constr(max_length=2048)]] = Field(
        None, description='tags of the space'
    )
    type: Optional[Type3] = Field('NO_CHANGE', description='type')


class SpacesIdLabelsAssignPostRequest(BaseModel):
    labels: List[constr(max_length=2048)] = Field(
        ..., description='The labels to assign to the space'
    )


class SpacesIdLabelsAssignPostResponse(RootModel[List[LabelIds]]):
    root: List[LabelIds]


class SpacesIdLabelsUnassignDeleteRequest(BaseModel):
    labelIds: List[constr(max_length=2048)] = Field(
        ..., description='missing documentation'
    )


class SpacesIdLabelsUnassignDeleteResponse(RootModel[List[LabelIds]]):
    root: List[LabelIds]


class Role2(Enum):
    DEFAULT = 'DEFAULT'
    MODERATOR = 'MODERATOR'
    AUTHOR = 'AUTHOR'
    PARTICIPANT = 'PARTICIPANT'
    READER = 'READER'


class SpacesIdParticipantPostRequest(BaseModel):
    role: Role2 = Field(..., description='The name of the role of the participant')
    userId: List[constr(max_length=2048)] = Field(
        ..., description='The user id of the participant'
    )


class SpacesIdParticipantPostResponse(RootModel[List[ParticipantAddResult]]):
    root: List[ParticipantAddResult]


class SpacesIdParticipantRemovePostRequest(BaseModel):
    userIds: List[constr(max_length=2048)] = Field(
        ..., description='The ids of the participants to remove '
    )


class SortBy2(Enum):
    DISPLAY_NAME = 'DISPLAY_NAME'
    NAME = 'NAME'
    FIRST_NAME = 'FIRST_NAME'


class FilterType(Enum):
    NONE = 'NONE'
    ACCESS_TYPE = 'ACCESS_TYPE'
    ROLE = 'ROLE'
    STATE = 'STATE'


class SpacesIdPinnedTopicsGetResponse(RootModel[List[SpacePinnedTopic]]):
    root: List[SpacePinnedTopic]


class SpacesIdSearchParticipantsToAddGetResponse(
    RootModel[List[AddParticipantsSearchResult]]
):
    root: List[AddParticipantsSearchResult]


class SpacesIdSearchSpaceParticipantsGetResponse(
    RootModel[List[ParticipantsSearchResultLarge]]
):
    root: List[ParticipantsSearchResultLarge]


class SpacesIdUpdateTimestampPutRequest(BaseModel):
    timestamp: datetime = Field(..., description='The new timestamp')


class Role3(Enum):
    MODERATOR = 'MODERATOR'
    AUTHOR = 'AUTHOR'
    PARTICIPANT = 'PARTICIPANT'
    READER = 'READER'


class SpacesSpaceIdParticipantPutRequest(BaseModel):
    role: Role3 = Field(..., description='updated role of participant')
    userId: constr(max_length=2048) = Field(
        ..., description='The id of the participant to update'
    )


class SpacesSpaceIdParticipantRequestPostRequest(BaseModel):
    reason: Optional[constr(max_length=2048)] = Field(
        None, description='Reason why the Access has been requested'
    )


class SpacesSpaceIdParticipantParticipantIdDenyPostRequest(BaseModel):
    reason: Optional[constr(max_length=2048)] = Field(
        None, description='Reason why the request has been denied'
    )


class SpacesSpaceIdTopicPostRequest(BaseModel):
    attachments: Optional[List[constr(max_length=16000)]] = Field(
        None, description='the attached files'
    )
    complex: Optional[bool] = Field(None, description='complex or not')
    content: Optional[constr(max_length=200000)] = Field(
        None, description='The content of this topic'
    )
    contentTags: Optional[List[constr(max_length=2048)]] = Field(
        None, description='the content tags'
    )
    formMetaData: Optional[constr(max_length=2048)] = Field(
        None, description='The formMetaData'
    )
    mentionedUser: Optional[constr(max_length=2048)] = Field(
        None, description='A list of mentioned users'
    )
    subject: constr(max_length=2048) = Field(
        ..., description='The subject of the topic'
    )
    tags: Optional[List[constr(max_length=2048)]] = Field(None, description='the tags')


class SpacesSpaceIdTopicTopicIdPutRequest(BaseModel):
    attachments: Optional[List[constr(max_length=16000)]] = Field(
        None, description='the attached files'
    )
    complex: Optional[bool] = Field(None, description='complex or not')
    content: Optional[constr(max_length=200000)] = Field(
        None, description='content of the topic'
    )
    contentTags: Optional[List[constr(max_length=2048)]] = Field(
        None, description='the content tags'
    )
    formMetaData: Optional[constr(max_length=2048)] = Field(
        None, description='formMetaData to update'
    )
    mentionedUsers: Optional[List[constr(max_length=2048)]] = Field(
        None, description='the updated mentioned users'
    )
    subject: Optional[constr(max_length=2048)] = Field(
        None, description='the subject of the topic'
    )
    tags: Optional[List[constr(max_length=2048)]] = Field(None, description='the tags')


class SpacesSpaceIdTopicTopicIdReplyPostRequest(BaseModel):
    attachments: Optional[List[constr(max_length=16000)]] = Field(
        None, description='the attached files'
    )
    complex: Optional[bool] = Field(None, description='complex or not')
    content: Optional[constr(max_length=200000)] = Field(
        None, description='Content of the reply'
    )
    formMetaData: Optional[constr(max_length=2048)] = Field(
        None, description='formMetaData used in the reply'
    )
    mentionedUser: Optional[constr(max_length=2048)] = Field(
        None, description='the user mentioned in the reply'
    )


class SpacesSpaceIdTopicTopicIdReplyReplyIdPutRequest(BaseModel):
    attachments: Optional[List[constr(max_length=16000)]] = Field(
        None, description='the attached files'
    )
    complex: Optional[bool] = Field(None, description='complex or not')
    content: Optional[constr(max_length=200000)] = Field(
        None, description='the content of the reply'
    )
    formMetaData: Optional[constr(max_length=2048)] = Field(
        None, description='formMetaData of the reply'
    )
    mentionedUsers: Optional[List[constr(max_length=2048)]] = Field(
        None, description='the mentioned users in the reply'
    )


class SpacesSpaceIdWelcomeboxContentPutRequest(BaseModel):
    displayWelcomeBox: Optional[bool] = Field(
        False, description='True, false, default:false'
    )


class SpacesTopicIdPinPutRequest(BaseModel):
    position: confloat(ge=0.0, le=255.0) = Field(
        ..., description='The position to pin to'
    )


class TelephonyDeviceInfosGetResponse(RootModel[List[V2DistributedClientInfo]]):
    root: List[V2DistributedClientInfo]


class Direction4(Enum):
    AFTER = 'AFTER'
    BEFORE = 'BEFORE'
    BOTH = 'BOTH'


class JournalFilter(Enum):
    ALL = 'ALL'
    MISSED = 'MISSED'
    DIALED = 'DIALED'
    RECEIVED = 'RECEIVED'
    DIVERTED = 'DIVERTED'
    VOICEMAILS = 'VOICEMAILS'
    UNHERAD_VOICEMAILS = 'UNHERAD_VOICEMAILS'


class UsersLabelsGetResponse(RootModel[List[Label]]):
    root: List[Label]


class UsersLabelsPostRequest(BaseModel):
    label: constr(max_length=2048) = Field(..., description='The label value to add')


class Name(RootModel[List[constr(max_length=2048)]]):
    root: List[constr(max_length=2048)]


class UsersPresenceGetResponse(RootModel[List[Presence]]):
    root: List[Presence]


class UserIds(RootModel[List[constr(max_length=6500)]]):
    root: List[constr(max_length=6500)]


class UsersPresencePutRequest(BaseModel):
    clearDND: Optional[bool] = Field(False, description='Clear the DND of the user.')
    dndUntil: Optional[datetime] = Field(
        None,
        description='Timestamp until the DND state of the user is active. This field is mandatory when the state is set to DND.',
    )
    state: constr(max_length=2048) = Field(..., description="The user's presence.")
    statusMessage: Optional[constr(max_length=2048)] = Field(
        None,
        description='An optional status message that is displayed instead of the location',
    )


class Locale(Enum):
    EN_US = 'EN_US'
    DE_DE = 'DE_DE'
    EN_GB = 'EN_GB'
    ES_ES = 'ES_ES'
    FR_FR = 'FR_FR'
    IT_IT = 'IT_IT'
    RU_RU = 'RU_RU'
    ZH_HANS_CN = 'ZH_HANS_CN'
    PT_BR = 'PT_BR'
    NL_NL = 'NL_NL'
    CA_ES = 'CA_ES'


class UsersProfilePutRequest(BaseModel):
    firstname: Optional[constr(max_length=128)] = Field(
        None, description='The new firstname of the user'
    )
    jobTitle: Optional[constr(max_length=128)] = Field(
        None, description='The new job title of the user'
    )
    lastname: Optional[constr(max_length=128)] = Field(
        None, description='The new lastname of the user'
    )
    locale: Optional[Locale] = Field(
        None,
        description='The new locale of the user. One of EN_US, DE_DE, EN_GB, ES_ES, FR_FR, IT_IT, RU_RU, ZH_HANS_CN.',
    )


class WebhooksGetResponse(RootModel[List[WebHook]]):
    root: List[WebHook]


class FilterEnum(Enum):
    CONVERSATION_CREATE = 'CONVERSATION.CREATE'
    CONVERSATION_UPDATE = 'CONVERSATION.UPDATE'
    CONVERSATION_ADD_ITEM = 'CONVERSATION.ADD_ITEM'
    CONVERSATION_UPDATE_ITEM = 'CONVERSATION.UPDATE_ITEM'
    USER_INCOMING_CALL = 'USER.INCOMING_CALL'
    USER_USER_UPDATED = 'USER.USER_UPDATED'
    USER_USER_SETTING_UPDATED = 'USER.USER_SETTING_UPDATED'
    USER_SUBMIT_FORM_DATA = 'USER.SUBMIT_FORM_DATA'


class WebhooksPostRequest(BaseModel):
    filter: List[FilterEnum] = Field(
        ...,
        description='A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE',
    )
    url: constr(max_length=2048) = Field(..., description='WebHook callback URL')


class WebhooksIncomingUserUserIdGetResponse(RootModel[List[IncomingWebhook]]):
    root: List[IncomingWebhook]


class WebhooksPresencePostRequest(BaseModel):
    url: constr(max_length=2048) = Field(..., description='WebHook callback URL')
    userIds: List[constr(max_length=6500)] = Field(
        ..., description='The IDs of the users to subscribe for their presence'
    )


class WebhooksPresenceIdPutRequest(BaseModel):
    url: Optional[constr(max_length=2048)] = Field(
        None, description='WebHook callback URL'
    )
    userIds: Optional[List[constr(max_length=6500)]] = Field(
        None, description='The IDs of the users to subscribe for their presence'
    )


class WebhooksIdPutRequest(BaseModel):
    filter: Optional[List[FilterEnum]] = Field(
        None,
        description='A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE',
    )
    url: Optional[constr(max_length=2048)] = Field(
        None, description='WebHook callback URL'
    )


class BasicSearchResult(BaseModel):
    spaces: Optional[List[Space]] = Field(None, description='List of spaces')
    status: Optional[str] = Field(
        None,
        description='The status of the search (NORESULT, ERROR, TIMEOUT, MORERESULT)',
    )


class ConversationSearchResult(BaseModel):
    matchingConversations: Optional[List[ConversationSearchResultItem]] = Field(
        None,
        description='A list of result items for conversations that match the search term.',
    )


class ConversationTextItem(BaseModel):
    content: Optional[str] = Field(None, description='The content of the text item')
    contentType: Optional[str] = Field(
        None,
        description='The type of the text item. It can be one of the following: RICH (with HTML content) or PLAIN (only text)',
    )
    formMetaData: Optional[str] = Field(None, description='The meta data form')
    isWebhookMessage: Optional[bool] = Field(
        None, description='Is this a webhook message?'
    )
    likedUserIds: Optional[List[str]] = Field(
        None, description='Array of IDs of the users who liked the item'
    )
    parentId: Optional[str] = Field(
        None,
        description='The ID of the parent item of the text item. This field is optional and can be used for thread views',
    )
    preview: Optional[Preview] = None
    state: Optional[str] = Field(
        None,
        description='The state of the text item. It can be one of the following: CREATED (which denotes that it was not modified since its creation), EDITED (which denotes that the creator of this item modified the item) or DELETED (which denotes that the item itself exists but its content was removed)',
    )
    subject: Optional[str] = Field(
        None,
        description='TThe subject of the text item. This field is optional and maybe filled when creating the text item',
    )


class DirectoryResult(BaseModel):
    hasMore: Optional[bool] = Field(
        None, description='are more results available, than start another search'
    )
    searchPointer: Optional[str] = Field(None, description='pointer for stored search ')
    spaces: Optional[List[Space]] = Field(None, description='list of spaces')


class RtcItem(BaseModel):
    ended: Optional[RtcEnded] = None
    missed: Optional[str] = Field(None, description='Indicates a missed call.')
    moved: Optional[RtcMoved] = None
    rtcParticipants: Optional[List[RtcParticipant]] = Field(
        None, description='Participants of the call.'
    )
    type: Optional[str] = Field(None, description='The type of the RTC item.')


class SpaceItem(BaseModel):
    Status: Optional[str] = Field(None, description='The Status of this item')
    attachments: Optional[List[SpaceAttachment]] = Field(
        None, description='The list of attachments'
    )
    complex: Optional[bool] = Field(None, description='Is this item complex')
    content: Optional[str] = Field(None, description='The content of this item')
    creationTime: Optional[float] = Field(
        None, description='The time this item got created'
    )
    creatorId: Optional[str] = Field(None, description='The Id of the creator')
    deletedBy: Optional[str] = Field(
        None, description='Incase this item got deleted, the id of the deletor'
    )
    externalAttachments: Optional[List[SpaceExternalAttachment]] = Field(
        None, description='A list of external attachments'
    )
    formMetaData: Optional[str] = Field(
        None, description='Incase there is FormMetaData'
    )
    itemId: Optional[str] = Field(None, description='the Id of this item')
    mentionedUsers: Optional[List[str]] = Field(
        None, description='A list of userIds who have been mentioned in this item'
    )
    modificationTime: Optional[float] = Field(
        None, description='the time this item got modified'
    )
    numberOfLikes: Optional[float] = Field(None, description='The number of likes')
    previews: Optional[List[SpaceItemPreview]] = Field(
        None, description='A list of previews'
    )
    sharedItems: Optional[List[SharedItem]] = Field(
        None, description='missing documentation'
    )
    spaceId: Optional[str] = Field(
        None, description='the Id of the space containing this item'
    )
    tenantId: Optional[str] = Field(None, description='the Id of the tenant')


class SpaceReply(BaseModel):
    parentTopicId: Optional[str] = Field(None, description='The Id of the parent topic')
    spaceItem: Optional[SpaceItem] = None


class SpaceTopic(BaseModel):
    lastContentCreationTime: Optional[float] = Field(
        None, description='The last time new content was created'
    )
    lastContentCreatorId: Optional[str] = Field(
        None, description='The Id of the last content creator'
    )
    numberOfReplies: Optional[float] = Field(
        None, description='The number of replies this topic has'
    )
    pinned: Optional[bool] = Field(None, description='Is this topic pinned')
    spaceItem: Optional[SpaceItem] = None
    subject: Optional[str] = Field(None, description='The subject of this topic')
    tags: Optional[List[str]] = Field(None, description='The tags ')


class SpaceTopicWithReplies(BaseModel):
    replies: Optional[List[SpaceReply]] = Field(
        None, description='A List holding the replies for a topic'
    )
    topic: Optional[SpaceTopic] = None


class User(BaseModel):
    avatar: Optional[str] = Field(
        None, description='The URL of the small avatar picture.'
    )
    avatarLarge: Optional[str] = Field(
        None, description='The URL of the large avatar picture.'
    )
    company: Optional[str] = Field(None, description="The name of the user's company")
    department: Optional[str] = Field(None, description='missing documentation')
    displayName: Optional[str] = Field(None, description="The user's display name")
    emailAddress: Optional[str] = Field(
        None, description='The primary email address of the user'
    )
    emailAddresses: Optional[List[UserEmailAddress]] = Field(
        None, description='additional email addresses of the user'
    )
    firstName: Optional[str] = Field(None, description='The first name of the user')
    jobTitle: Optional[str] = Field(None, description='The job title of the user')
    lastName: Optional[str] = Field(None, description='The last name of the user')
    locale: Optional[str] = Field(
        None, description='The locale of the user. (E.g. en-US, de-DE)'
    )
    phoneNumber: Optional[str] = Field(
        None, description='provisioned phone number of the user'
    )
    phoneNumbers: Optional[List[UserPhoneNumber]] = Field(
        None, description='additional phone numbers of the user'
    )
    primaryTenantId: Optional[str] = Field(None, description='The primary tenant id')
    secondaryEmailAddress: Optional[str] = Field(
        None, description='The secondary email address'
    )
    secondaryTenantId: Optional[str] = Field(
        None, description='The secondary tenant id'
    )
    userId: Optional[str] = Field(None, description='The ID of the user')
    userState: Optional[str] = Field(
        None, description='The state of the user, e.g. deleted'
    )
    userType: Optional[str] = Field(None, description='the type of the user')


class SpacesSpaceIdTopicsGetResponse(RootModel[List[SpaceTopic]]):
    root: List[SpaceTopic]


class UsersGetResponse(RootModel[List[User]]):
    root: List[User]


class UsersListGetResponse(RootModel[List[User]]):
    root: List[User]


class ConversationItem(BaseModel):
    attachments: Optional[List[Attachment]] = Field(
        None, description='Array of files attached to the item'
    )
    convId: Optional[str] = Field(
        None, description='The ID of the conversation the item belongs to'
    )
    creationTime: Optional[float] = Field(
        None, description='UTC timestamp when the item was created'
    )
    creatorId: Optional[str] = Field(
        None, description='The ID of the user who created the conversation item'
    )
    includeInUnreadCount: Optional[bool] = Field(
        None,
        description='Indicates whether the item is included in the unread message count',
    )
    itemId: Optional[str] = Field(None, description='The ID of the item')
    modificationTime: Optional[float] = Field(
        None, description='UTC timestamp when the conversation was modified'
    )
    rtc: Optional[RtcItem] = None
    system: Optional[SystemItem] = None
    text: Optional[ConversationTextItem] = None
    type: Optional[str] = Field(
        None,
        description='The type of the conversation item. It can be one of the following TEXT, SYSTEM or RTC',
    )


class FlaggedItem(BaseModel):
    item: Optional[SpaceItem] = None
    parentItem: Optional[SpaceItem] = None


class FlaggedItemsResult(BaseModel):
    flaggedItems: Optional[List[FlaggedItem]] = Field(
        None, description='A list of flagged items'
    )
    hasMore: Optional[bool] = Field(
        None,
        description='More results available (true-use searchpointer for next search/false)',
    )
    searchPointer: Optional[str] = Field(None, description='The searchpointer')


class ConversationsMessagesFlagGetResponse(RootModel[List[ConversationItem]]):
    root: List[ConversationItem]


class ConversationsConvIdItemsGetResponse(RootModel[List[ConversationItem]]):
    root: List[ConversationItem]


class ConversationsConvIdMessagesFlagGetResponse(RootModel[List[ConversationItem]]):
    root: List[ConversationItem]


class TelephonyTelephonyConversationIdJournalGetResponse(
    RootModel[List[ConversationItem]]
):
    root: List[ConversationItem]
