# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:56:44+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Path, Query
from pydantic import confloat, constr
from starlette.requests import Request

from models import (
    BasicSearchResult,
    Conversation,
    ConversationDetails,
    ConversationItem,
    ConversationsByIdsGetResponse,
    ConversationsCommunityGetResponse,
    ConversationsConversationdetailsGetResponse,
    ConversationsConvIdItemsGetResponse,
    ConversationsConvIdMessagesFlagGetResponse,
    ConversationsConvIdParticipantsGetResponse,
    ConversationsConvIdPinsGetResponse,
    ConversationSearchResult,
    ConversationsFavoriteGetResponse,
    ConversationsGetResponse,
    ConversationsMessagesFlagGetResponse,
    ConversationsPage,
    ConvIds,
    Direction,
    Direction4,
    DirectoryResult,
    Filter,
    FilterType,
    FlaggedItemsResult,
    GetSpacesResult,
    Ids,
    IncomingWebhook,
    JournalFilter,
    Label,
    Name,
    Order,
    Participants,
    ParticipantsImportDataResult,
    ParticipantsLikeResult,
    ParticipantSpaceWrapper,
    ParticipantsSearchResult,
    Presence,
    PrioritySpaces,
    Scope,
    Scope2,
    SearchDirection,
    Sort,
    SortBy,
    SortBy2,
    SortOrder,
    SpaceReply,
    SpacesIdLabelsAssignPostResponse,
    SpacesIdLabelsUnassignDeleteResponse,
    SpacesIdParticipantPostResponse,
    SpacesIdPinnedTopicsGetResponse,
    SpacesIdSearchParticipantsToAddGetResponse,
    SpacesIdSearchSpaceParticipantsGetResponse,
    SpacesSearchRecentGetResponse,
    SpacesSearchStartDetailedGetResponse,
    SpacesSpaceIdTopicsGetResponse,
    SpaceTopic,
    SpaceTopicWithReplies,
    SupportInfo,
    TelephonyDeviceInfosGetResponse,
    TelephonyTelephonyConversationIdJournalGetResponse,
    Type,
    User,
    UserIds,
    UsersGetResponse,
    UsersLabelsGetResponse,
    UsersListGetResponse,
    UsersPresenceGetResponse,
    WebHook,
    WebhooksGetResponse,
    WebhooksIncomingUserUserIdGetResponse,
)

app = MCPProxy(
    description='Circuit REST API to interact with the Circuit system.\n\n[Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)',
    title='REST API Version 2',
    version='2.9.235',
    servers=[{'url': 'https://circuitsandbox.net/rest/v2'}],
)


@app.get(
    '/conversations',
    description=""" Gets a list of conversations and communities the authenticated user participates in.
OauthScopes: READ_CONVERSATIONS """,
    tags=[
        'conversation_management',
        'conversation_search',
        'conversation_item_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_conversations(
    mod_time: Optional[datetime] = Query(None, alias='modTime'),
    direction: Optional[Direction] = 'BEFORE',
    results: Optional[confloat(ge=1.0, le=100.0)] = 25,
):
    """
    Gets a list of conversations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/byIds',
    description=""" Gets conversation based on the given IDs.
OauthScopes: READ_CONVERSATIONS """,
    tags=['conversation_management', 'conversation_item_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_conversations_by_id(conv_ids: ConvIds = Query(..., alias='convIds')):
    """
    Gets conversations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/community',
    description=""" Gets a list of communities. This endpoint can be used to explore the communities the authenticated user could join.
OauthScopes: READ_CONVERSATIONS """,
    tags=['directory_management', 'space_search'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_community_conversations(
    sort: Optional[Sort] = 'ALPHABETICALLY',
    order: Optional[Order] = 'ASCENDING',
    include_own: Optional[bool] = Query(False, alias='includeOwn'),
    start_index: Optional[confloat(ge=0.0, le=255.0)] = Query(0, alias='startIndex'),
    results: Optional[confloat(ge=1.0, le=100.0)] = 25,
):
    """
    Gets a list of communities
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/community',
    description=""" Creates a community. Communities are open conversations that anyone in a Circuit domain (tenant) can join without having to be added by another user.
OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS """,
    tags=['conversation_management', 'community_conversation_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_community_conversation(request: Request):
    """
    Creates a community conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/conversations/community/{convId}',
    description=""" Updates the information of the given community.
OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS """,
    tags=[
        'conversation_management',
        'community_conversation_operations',
        'conversation_item_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_conversation_community(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'), request: Request = ...
):
    """
    Updates the information of a community
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/community/{convId}/join',
    description=""" Adds the authenticated user to the given community (i.e., allows the user to join this community). Contrary to the operation of adding a new participant, this operation can only be performed by a user who is not yet a member of the community.
OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS """,
    tags=['community_conversation_operations', 'participant_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def join_community_conversation(
    conv_id: constr(max_length=2048) = Path(..., alias='convId')
):
    """
    Adds the authenticated user to a community
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/conversations/community/{convId}/participants',
    description=""" Removes one or more participants from the given community. The last participant of a community cannot be removed. This operation can only be performed by a user who is already a member of the community.
OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS """,
    tags=['community_conversation_operations', 'participant_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_participant_community(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'),
    participants: Participants = ...,
):
    """
    Removes participants from a community
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/community/{convId}/participants',
    description=""" Adds one or more participants to the given community. This operation can only be performed by a user who is already a member of the community.
OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS """,
    tags=['community_conversation_operations', 'participant_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_participant_community(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'), request: Request = ...
):
    """
    Adds participants to a community
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/conversationdetails',
    description=""" Gets the conference details of the given conversations. Conference details include the URL, which is used to join the conference through a web or mobile application, as well as the dial-in phone numbers and conference PIN, which are used to join the conference by phone.
OauthScopes: READ_CONVERSATIONS """,
    tags=[
        'conversation_management',
        'conversation_item_retrieval',
        'community_conversation_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_join_details_multiple(conv_ids: ConvIds = Query(..., alias='convIds')):
    """
    Gets the conference details for multiple conversations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/direct',
    description=""" Checks if a 1-to-1 conversation between the authenticated user and the user with the provided userId exists.
OauthScopes: READ_CONVERSATIONS """,
    tags=['conversation_management', 'participant_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_direct_conversation(participant: constr(max_length=2048)):
    """
    Checks for a 1-to-1 conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/direct',
    description=""" Creates a 1-to-1 conversation between the authenticated user and the user with the provided userId. In case there is already an existing 1-to-1 conversation between these users, the endpoint returns the existing conversation.
OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS """,
    tags=['conversation_management', 'participant_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_direct_conversation(request: Request):
    """
    Creates a 1-to-1 conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/favorite',
    description=""" Gets the conversationIds which are marked as favorites.
OauthScopes: READ_CONVERSATIONS """,
    tags=['favorites_management', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_favorite_conversations():
    """
    Gets favorite conversations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/group',
    description=""" Creates a group conversation between three or more users. The authenticated user is directly added to this conversation.
OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS """,
    tags=['conversation_management', 'community_conversation_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_group_conversation(request: Request):
    """
    Creates a group conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/conversations/group/{convId}',
    description=""" Updates the information of the given group conversation.
OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS """,
    tags=['conversation_management', 'conversation_item_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_conversation_group(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'), request: Request = ...
):
    """
    Updates the information of a group conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/conversations/group/{convId}/participants',
    description=""" Removes one or more participants from the given group conversation. The last participant of a group conversation cannot be removed. This operation can only be performed on behalf of a user who is already a member of the conversation.
OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS """,
    tags=['conversation_management', 'participant_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_participant_group(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'),
    participants: Participants = ...,
):
    """
    Removes participants from a group conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/group/{convId}/participants',
    description=""" Adds one or more participants to the given group conversation. This operation can only be performed by a user who is already a member of the conversation.
OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS """,
    tags=[
        'conversation_management',
        'community_conversation_operations',
        'participant_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_participant_group(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'), request: Request = ...
):
    """
    Adds participants to a group conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/label/{labelId}',
    description=""" Returns conversations with matching labels and paginated 
OauthScopes: READ_CONVERSATIONS """,
    tags=[
        'conversation_management',
        'conversation_search',
        'label_assignment_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_conversations_by_label(
    label_id: constr(max_length=2048) = Path(..., alias='labelId'),
    next_page_pointer: Optional[constr(max_length=2048)] = Query(
        None, alias='nextPagePointer'
    ),
    page_size: Optional[confloat(ge=1.0, le=100.0)] = Query(25, alias='pageSize'),
):
    """
    Returns conversations with a certain label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/messages/flag',
    description=""" Gets a list of all the messages the authenticated user has flagged. This endpoint should be used carefully in case where the authenticated user has a lot of flagged messages.
OauthScopes: READ_CONVERSATIONS """,
    tags=['conversation_item_retrieval', 'conversation_item_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_flag_item_conv():
    """
    Gets a list of the flagged messages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/messages/{itemId}',
    description=""" Returns a text item for a given item id
OauthScopes: READ_CONVERSATIONS """,
    tags=['conversation_item_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_single_conversationtem(
    item_id: constr(max_length=2048) = Path(..., alias='itemId')
):
    """
    Returns a text item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/moderate/{convId}',
    description=""" Set a conversation in moderatd mode. Moderators can be added and removed
OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS """,
    tags=['conversation_management', 'participant_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def moderate_conversation(conv_id: constr(max_length=2048) = Path(..., alias='convId')):
    """
    Set conversation moderated
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/resolveinvitetoken',
    description=""" Resolves an invite token to a conversation
OauthScopes: READ_CONVERSATIONS """,
    tags=['conversation_management', 'conversation_search'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def resolve_invitation_token(token: constr(max_length=2048)):
    """
    Resolves an invite token to a conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/search',
    description=""" Performs a search for conversation content. A maximum of 100 conversations is returned. If you hit this limit you should refine the search term.
OauthScopes: READ_CONVERSATIONS """,
    tags=['conversation_search', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_conversations(
    term: constr(max_length=2048),
    include_item_ids: Optional[bool] = Query(False, alias='includeItemIds'),
    scope: Optional[Scope] = 'ALL',
):
    """
    Performs a conversation search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/unmoderate/{convId}',
    description=""" Set a conversation to unmoderatd mode
OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS """,
    tags=['conversation_management', 'community_conversation_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def unmoderate_conversation(
    conv_id: constr(max_length=2048) = Path(..., alias='convId')
):
    """
    Set conversation unmoderated
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/{convId}',
    description=""" Gets a conversation based on the given ID.
OauthScopes: READ_CONVERSATIONS """,
    tags=['conversation_item_retrieval', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_conversationby_id(conv_id: constr(max_length=2048) = Path(..., alias='convId')):
    """
    Gets a conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/conversations/{convId}/archive',
    description=""" The conversation will no longer be archived but active again
OauthScopes: WRITE_CONVERSATIONS """,
    tags=[
        'conversation_management',
        'community_conversation_operations',
        'participant_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def undo_archive_conversation(
    conv_id: constr(max_length=2048) = Path(..., alias='convId')
):
    """
    Unmute conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/{convId}/archive',
    description=""" Archives a conversation by muting it
OauthScopes: WRITE_CONVERSATIONS """,
    tags=['conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def archive_conversation(conv_id: constr(max_length=2048) = Path(..., alias='convId')):
    """
    Archives conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/{convId}/conversationdetails',
    description=""" Gets the conference details of the given conversation. Conference details include the URL, which is used to join the conference through a web or mobile application, as well as the dial-in phone numbers and conference PIN, which are used to join the conference by phone.
OauthScopes: READ_CONVERSATIONS """,
    tags=['conversation_management', 'conversation_item_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_join_details(conv_id: constr(max_length=2048) = Path(..., alias='convId')):
    """
    Gets the conference details of a conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/conversations/{convId}/favorite',
    description=""" Removes a conversation from favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations.
OauthScopes: WRITE_CONVERSATIONS """,
    tags=['favorites_management', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_favorite(conv_id: constr(max_length=2048) = Path(..., alias='convId')):
    """
    Removes a conversation from favorites
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/{convId}/favorite',
    description=""" Adds a conversation to the favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations.
OauthScopes: WRITE_CONVERSATIONS """,
    tags=['favorites_management', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_favorite(conv_id: constr(max_length=2048) = Path(..., alias='convId')):
    """
    Adds a conversation to the favorites
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/{convId}/items',
    description=""" Gets a list of conversation items.
OauthScopes: READ_CONVERSATIONS """,
    tags=['conversation_item_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_conversation_items(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'),
    mod_time: Optional[datetime] = Query(None, alias='modTime'),
    direction: Optional[Direction] = 'BEFORE',
    results: Optional[confloat(ge=1.0, le=100.0)] = 25,
):
    """
    Gets a list of conversation items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/{convId}/label',
    description=""" Adds a label to a conversation, you can search and organize your conversations based on these labels
OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS """,
    tags=['conversation_management', 'label_assignment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def assign_label(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'), request: Request = ...
):
    """
    Adds a label to a conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/conversations/{convId}/label/{labelId}',
    description=""" Removes a label from a conversation, you can search and organize your conversations based on these labels
OauthScopes: WRITE_CONVERSATIONS """,
    tags=['label_assignment_management', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def unassign_label(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'),
    label_id: constr(max_length=2048) = Path(..., alias='labelId'),
):
    """
    Removes a label from a conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/{convId}/messages',
    description=""" Adds a message to the given conversation. This operation can be only performed on behalf of a user who is already a member of the conversation.
OauthScopes: WRITE_CONVERSATIONS, CREATE_CONVERSATIONS_CONTENT """,
    tags=['conversation_item_management', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_text_item(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'), request: Request = ...
):
    """
    Adds a message to a conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/{convId}/messages/flag',
    description=""" Gets a list of all the flagged messages in the given conversation.
OauthScopes: READ_CONVERSATIONS, ORGANIZE_CONVERSATIONS """,
    tags=['conversation_item_retrieval', 'conversation_item_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_flag_item(conv_id: constr(max_length=2048) = Path(..., alias='convId')):
    """
    Gets a list of the flagged messages of a conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/conversations/{convId}/messages/{itemId}',
    description=""" Marks a message in the given conversation as deleted. Deleted messages are still part of the conversation, but their content is no more visible. This operation can only be performed on behalf of the message's creator.
OauthScopes: WRITE_CONVERSATIONS, DELETE_CONVERSATIONS_CONTENT """,
    tags=['conversation_item_management', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_text_item(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'),
    item_id: constr(max_length=2048) = Path(..., alias='itemId'),
):
    """
    Deletes a message from a conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/{convId}/messages/{itemId}',
    description=""" Adds a message to the existing item. The added message will be a child item of the message with the given itemId.
OauthScopes: WRITE_CONVERSATIONS """,
    tags=['conversation_item_management', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_text_item_with_parent(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'),
    item_id: constr(max_length=2048) = Path(..., alias='itemId'),
    request: Request = ...,
):
    """
    Adds a message to an item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/conversations/{convId}/messages/{itemId}',
    description=""" Updates the content or subject of the existing message. Only the creator of the message is allowed to perform this operation.
OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT """,
    tags=['conversation_item_management', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_text_item(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'),
    item_id: constr(max_length=2048) = Path(..., alias='itemId'),
    request: Request = ...,
):
    """
    Updates a message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/conversations/{convId}/messages/{itemId}/flag',
    description=""" Removes the flag from a given message that is posted to the given conversation.
OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS """,
    tags=['conversation_item_management', 'space_interaction'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def un_flag_item(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'),
    item_id: constr(max_length=2048) = Path(..., alias='itemId'),
):
    """
    Removes the flag from a message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/{convId}/messages/{itemId}/flag',
    description=""" Adds a flag to the given message in the given conversation.
OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS """,
    tags=['conversation_item_management', 'community_conversation_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def flag_item(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'),
    item_id: constr(max_length=2048) = Path(..., alias='itemId'),
    request: Request = ...,
):
    """
    Adds a flag to a message in a conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/conversations/{convId}/messages/{itemId}/like',
    description=""" Removes a "like" from the given message in the given conversation
OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT """,
    tags=['conversation_item_management', 'space_interaction'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def unlike_item(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'),
    item_id: constr(max_length=2048) = Path(..., alias='itemId'),
):
    """
    Removes a "like" from a message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/{convId}/messages/{itemId}/like',
    description=""" Adds a "like" to the given message in the given conversation
OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT """,
    tags=['space_interaction', 'conversation_item_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def like_item(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'),
    item_id: constr(max_length=2048) = Path(..., alias='itemId'),
):
    """
    Adds a "like" to a message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/conversations/{convId}/moderators',
    description=""" Removes a list of moderators from a conversation
OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS """,
    tags=['conversation_management', 'participant_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_moderators(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'), request: Request = ...
):
    """
    Remove moderators
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/{convId}/moderators',
    description=""" Adds a list of moderators to a conversation
OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS """,
    tags=['conversation_management', 'participant_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_moderators(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'), request: Request = ...
):
    """
    Add moderators
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/{convId}/participants',
    description=""" Performs a search for participants. The max number of participants is configurable. If more participants are available a search pointer is returned for consecutive calls.
OauthScopes: READ_CONVERSATIONS """,
    tags=['participant_management', 'community_conversation_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_participants_by_conv_id(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'),
    page_size: confloat(ge=1.0, le=25.0) = Query(..., alias='pageSize'),
    name: Optional[constr(max_length=2048)] = None,
    type: Optional[Type] = 'REGULAR',
    search_pointer: Optional[constr(max_length=2048)] = Query(
        None, alias='searchPointer'
    ),
):
    """
    Performs a list of participants
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations/{convId}/pins',
    description=""" Returns pinned topics of a conversation
OauthScopes: READ_CONVERSATIONS """,
    tags=[
        'conversation_management',
        'conversation_pin_management',
        'topic_handling',
        'community_conversation_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_pinned_conversations(
    conv_id: constr(max_length=2048) = Path(..., alias='convId')
):
    """
    Returns pinned topics of a conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/conversations/{convId}/pins/{itemId}',
    description=""" Unpins a topic of a conversation
OauthScopes: READ_CONVERSATIONS """,
    tags=['conversation_management', 'conversation_pinning', 'topic_pin_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def un_pin_a_conversation(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'),
    item_id: constr(max_length=2048) = Path(..., alias='itemId'),
):
    """
    Unpins a topic of a conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations/{convId}/pins/{itemId}',
    description=""" Pins a topic of a conversation
OauthScopes: READ_CONVERSATIONS """,
    tags=['conversation_management', 'conversation_pinning', 'topic_pin_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def pin_a_conversation(
    conv_id: constr(max_length=2048) = Path(..., alias='convId'),
    item_id: constr(max_length=2048) = Path(..., alias='itemId'),
):
    """
    Pins a topic of a conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rtc/sessions',
    description=""" Gets a list of active RTCsessions
OauthScopes: CALLS """,
    tags=['session_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_active_sessions():
    """
    Gets a list of active sessions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces',
    description=""" Get the spaces
OauthScopes: READ_SPACE """,
    tags=['space_operations', 'directory_management', 'space_search'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_spaces(
    timestamp: Optional[datetime] = None,
    number_of_results: Optional[confloat(ge=0.0, le=255.0)] = Query(
        None, alias='numberOfResults'
    ),
):
    """
    Get the spaces
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/spaces/create',
    description=""" Create a space
OauthScopes: WRITE_SPACE, MANAGE_SPACE, CREATE_SPACE_CONTENT """,
    tags=['space_operations', 'community_conversation_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_space(request: Request):
    """
    Create a space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/directory',
    description=""" Get the directory by a search query in ordered way
OauthScopes: READ_SPACE """,
    tags=['directory_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_directory(
    sort_by: SortBy = Query(..., alias='sortBy'),
    sort_order: SortOrder = Query(..., alias='sortOrder'),
    filter: Filter = 'NONE',
    query: Optional[constr(max_length=2048)] = None,
    page_pointer: Optional[constr(max_length=2048)] = Query(None, alias='pagePointer'),
    number_of_results: Optional[confloat(ge=0.0, le=255.0)] = Query(
        25, alias='numberOfResults'
    ),
):
    """
    Get the directory
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/exists/{name}',
    description=""" Find out if a space name already exists for non-secret spaces.
OauthScopes: READ_SPACE """,
    tags=['space_operations', 'directory_management', 'space_search'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def exists_space_name(name: constr(max_length=2048)):
    """
    Space name exists
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/spaces/flag/{itemId}',
    description=""" flag a space item
OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT """,
    tags=['conversation_item_management', 'space_interaction'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def flag_space_item(item_id: constr(max_length=2048) = Path(..., alias='itemId')):
    """
    flag a space item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/flagged',
    description=""" Get flagged items
OauthScopes: READ_SPACE """,
    tags=['conversation_item_retrieval', 'space_interaction', 'conversation_search'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_flagged_items(
    search_direction: SearchDirection = Query(..., alias='searchDirection'),
    timestamp: datetime = ...,
    search_pointer: Optional[constr(max_length=2048)] = Query(
        None, alias='searchPointer'
    ),
    number_of_results: Optional[confloat(ge=0.0, le=255.0)] = Query(
        25, alias='numberOfResults'
    ),
):
    """
    Get flagged items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/ids',
    description=""" Get the spaces by their ids
OauthScopes: READ_SPACE """,
    tags=['space_operations', 'directory_management', 'space_search'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_spaces_by_ids(ids: Ids):
    """
    Get the spaces by their ids
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/spaces/item/{itemId}',
    description=""" deletes a space item
OauthScopes: WRITE_SPACE, DELETE_SPACE_CONTENT """,
    tags=['space_operations', 'space_item_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_space_item(item_id: constr(max_length=2048) = Path(..., alias='itemId')):
    """
    deletes a space item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/spaces/like/{itemId}',
    description=""" Like a space item
OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT """,
    tags=['space_interaction', 'space_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def like_space_item(item_id: constr(max_length=2048) = Path(..., alias='itemId')):
    """
    Like a space item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/likes/{itemId}',
    description=""" Get the likes of an item
OauthScopes: READ_SPACE """,
    tags=['space_interaction', 'conversation_item_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_likes(
    item_id: constr(max_length=2048) = Path(..., alias='itemId'),
    search_pointer: Optional[constr(max_length=2048)] = Query(
        None, alias='searchPointer'
    ),
    number_of_results: Optional[confloat(ge=0.0, le=255.0)] = Query(
        25, alias='numberOfResults'
    ),
):
    """
    Get the likes of an item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/spaces/search/add/recent',
    description=""" Add recent search of a client to search controller.
OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE """,
    tags=['conversation_search', 'space_search'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_recent_space_search(request: Request):
    """
    Add recent search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/spaces/search/cancel/{searchId}',
    description=""" Cancels a space search of a client.
OauthScopes: WRITE_SPACE, MANAGE_SPACE """,
    tags=['space_operations', 'space_search'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def cancel_space_search(
    search_id: constr(max_length=2048) = Path(..., alias='searchId')
):
    """
    Cancels a space search of a client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/search/recent',
    description=""" Retrieve recent space searches for a user.
OauthScopes: READ_SPACE """,
    tags=['space_search', 'directory_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_recent_searches():
    """
    Retrieve recent space searches
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/search/startBasic',
    description=""" starts a basic search in spaces
OauthScopes: READ_SPACE """,
    tags=['conversation_search', 'space_search'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def start_basic_spaces_search(
    scope: Scope2,
    search_term: constr(max_length=2048) = Query(..., alias='searchTerm'),
    start_time: Optional[datetime] = Query(None, alias='startTime'),
    end_time: Optional[datetime] = Query(None, alias='endTime'),
    priority_spaces: Optional[PrioritySpaces] = Query(None, alias='prioritySpaces'),
):
    """
    starts a basic search in spaces
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/search/startDetailed',
    description=""" starts a detailed search in a space
OauthScopes: READ_SPACE """,
    tags=['conversation_search', 'space_search'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def start_detailed_space_search(
    scope: Scope2,
    search_term: constr(max_length=2048) = Query(..., alias='searchTerm'),
    start_time: Optional[datetime] = Query(None, alias='startTime'),
    end_time: Optional[datetime] = Query(None, alias='endTime'),
    space_id: constr(max_length=2048) = Query(..., alias='spaceId'),
    search_id: Optional[constr(max_length=2048)] = Query(None, alias='searchId'),
):
    """
    starts a detailed search in a space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/spaces/topic/{topicId}/updateTags',
    description=""" Update the tags of a topic  
OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT """,
    tags=['label_assignment_management', 'topic_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_topic_tags(
    topic_id: constr(max_length=2048) = Path(..., alias='topicId'),
    request: Request = ...,
):
    """
    Update tags
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/spaces/unflag/{itemId}',
    description=""" Unflag a space item
OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT """,
    tags=['space_interaction', 'conversation_item_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def unflag_space_item(item_id: constr(max_length=2048) = Path(..., alias='itemId')):
    """
    Unflag a space item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/spaces/unlike/{itemId}',
    description=""" Unlike a space item
OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT """,
    tags=['conversation_item_management', 'space_interaction'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def unlike_space_item(item_id: constr(max_length=2048) = Path(..., alias='itemId')):
    """
    Unlike a space item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/spaces/{id}',
    description=""" Delete a space
OauthScopes: WRITE_SPACE, MANAGE_SPACE, DELETE_SPACE_CONTENT """,
    tags=['space_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_space(id: constr(max_length=2048)):
    """
    Delete a space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/spaces/{id}',
    description=""" Update a space
OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT """,
    tags=['space_operations', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_space(id: constr(max_length=2048), request: Request = ...):
    """
    Update a space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/spaces/{id}/join',
    description=""" Join a space
OauthScopes: WRITE_SPACE """,
    tags=[
        'community_conversation_operations',
        'space_operations',
        'space_participant_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def join_space(id: constr(max_length=2048)):
    """
    Join a space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/spaces/{id}/labels/assign',
    description=""" Assign labels to space
OauthScopes: WRITE_SPACE, ORGANIZE_SPACE """,
    tags=['label_assignment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def assign_labels(id: constr(max_length=2048), request: Request = ...):
    """
    Assign labels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/spaces/{id}/labels/unassign',
    description=""" Unassign labels from a space
OauthScopes: WRITE_SPACE, ORGANIZE_SPACE """,
    tags=['label_assignment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def unassign_labels(id: constr(max_length=2048), request: Request = ...):
    """
    Unassign labels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/spaces/{id}/leave',
    description=""" Leave a space
OauthScopes: WRITE_SPACE """,
    tags=['space_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def leave_space(id: constr(max_length=2048)):
    """
    Leave a space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/spaces/{id}/participant',
    description=""" Add a participant to a space
OauthScopes: WRITE_SPACE, MANAGE_SPACE """,
    tags=[
        'community_conversation_operations',
        'participant_management',
        'space_participant_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_participants_to_space(id: constr(max_length=2048), request: Request = ...):
    """
    Add Participant to Space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/spaces/{id}/participant/remove',
    description=""" removes Participants from a space
OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE """,
    tags=['participant_management', 'space_participant_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def v2_remove_participants_from_space(
    id: constr(max_length=2048), request: Request = ...
):
    """
    Removes participants from a space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/{id}/participants',
    description=""" Get the participants of a space
OauthScopes: READ_SPACE """,
    tags=[
        'community_conversation_operations',
        'participant_management',
        'space_participant_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_space_participants(
    id: constr(max_length=2048),
    sort_by: SortBy2 = Query(..., alias='sortBy'),
    sort_order: SortOrder = Query(..., alias='sortOrder'),
    filter_type: FilterType = Query(..., alias='filterType'),
    filter_value: Optional[constr(max_length=2048)] = Query(None, alias='filterValue'),
    query: Optional[constr(max_length=2048)] = None,
    search_pointer: Optional[constr(max_length=2048)] = Query(
        None, alias='searchPointer'
    ),
    number_of_results: Optional[confloat(ge=0.0, le=255.0)] = Query(
        25, alias='numberOfResults'
    ),
):
    """
    Get the participants of a space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/{id}/participants/pending',
    description=""" Get the pending participants of a space
OauthScopes: WRITE_SPACE, MANAGE_SPACE """,
    tags=[
        'community_conversation_operations',
        'participant_management',
        'space_participant_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_pending_participants(
    id: constr(max_length=2048),
    search_pointer: Optional[constr(max_length=2048)] = Query(
        None, alias='searchPointer'
    ),
    number_of_results: Optional[confloat(ge=0.0, le=255.0)] = Query(
        25, alias='numberOfResults'
    ),
):
    """
    Get the pending participants of a space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/{id}/pinnedTopics',
    description=""" Retrieve pinned topics of a space
OauthScopes: READ_SPACE """,
    tags=['conversation_pinning', 'topic_pin_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_pinned_topics(id: constr(max_length=2048)):
    """
    Retrieve pinned topics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/{id}/searchParticipantsToAdd',
    description=""" Finds participants to add to a space 
OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE """,
    tags=[
        'participant_management',
        'space_participant_management',
        'community_conversation_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_participants_to_add(
    id: constr(max_length=2048), query: constr(max_length=2048) = ...
):
    """
    Finds participants to add to add to a space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/{id}/searchSpaceParticipants',
    description=""" Get the participants of a space
OauthScopes: READ_SPACE """,
    tags=['participant_management', 'space_participant_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_space_participants(
    id: constr(max_length=2048), query: constr(max_length=2048) = ...
):
    """
    Get the participants of a space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/spaces/{id}/updateTimestamp',
    description=""" Update read timestamp
OauthScopes: READ_SPACE, WRITE_SPACE """,
    tags=['conversation_item_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_read_timestamp(id: constr(max_length=2048), request: Request = ...):
    """
    Update read timestamp
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/spaces/{spaceId}/participant',
    description=""" Update participant in space
OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE """,
    tags=[
        'participant_management',
        'space_participant_management',
        'conversation_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_participant_in_space(
    space_id: constr(max_length=2048) = Path(..., alias='spaceId'),
    request: Request = ...,
):
    """
    Update participant
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/{spaceId}/participant/import/',
    description=""" missing documentation
OauthScopes: READ_SPACE """,
    tags=['space_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_participants_import_data(
    space_id: constr(max_length=2048) = Path(..., alias='spaceId')
):
    """
    missing documentation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/spaces/{spaceId}/participant/request',
    description=""" request access for a space
OauthScopes: READ_SPACE """,
    tags=['space_operations', 'space_participant_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def request_space_acces(
    space_id: constr(max_length=2048) = Path(..., alias='spaceId'),
    request: Request = ...,
):
    """
    request access for a space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/spaces/{spaceId}/participant/{participantId}/deny',
    description=""" Deny access for a space
OauthScopes: WRITE_SPACE, MANAGE_SPACE """,
    tags=['space_operations', 'participant_management', 'space_participant_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def deny_space_acces(
    space_id: constr(max_length=2048) = Path(..., alias='spaceId'),
    participant_id: constr(max_length=2048) = Path(..., alias='participantId'),
    request: Request = ...,
):
    """
    Deny access for a space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/spaces/{spaceId}/participant/{participantId}/grant',
    description=""" grant access for a space
OauthScopes: WRITE_SPACE, MANAGE_SPACE """,
    tags=['space_operations', 'space_participant_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def grant_space_acces(
    space_id: constr(max_length=2048) = Path(..., alias='spaceId'),
    participant_id: constr(max_length=2048) = Path(..., alias='participantId'),
):
    """
    grant access for a space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/spaces/{spaceId}/topic',
    description=""" creates a new space topic
OauthScopes: WRITE_SPACE, MANAGE_SPACE, CREATE_SPACE_CONTENT """,
    tags=['space_operations', 'topic_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_space_topic(
    space_id: constr(max_length=2048) = Path(..., alias='spaceId'),
    request: Request = ...,
):
    """
    creates a new space topic
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/{spaceId}/topic/{topicId}',
    description=""" Gets a number of Space replies with a matching topic
OauthScopes: READ_SPACE """,
    tags=['space_reply_handling', 'topic_handling', 'conversation_item_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def v2_get_topic_with_replies(
    space_id: constr(max_length=2048) = Path(..., alias='spaceId'),
    topic_id: constr(max_length=2048) = Path(..., alias='topicId'),
    number_of_replies: Optional[confloat(ge=0.0, le=255.0)] = Query(
        25, alias='numberOfReplies'
    ),
):
    """
    Gets space replies and a topic
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/spaces/{spaceId}/topic/{topicId}',
    description=""" Updates a topic
OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT """,
    tags=['topic_handling', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_space_topic(
    space_id: constr(max_length=2048) = Path(..., alias='spaceId'),
    topic_id: constr(max_length=2048) = Path(..., alias='topicId'),
    request: Request = ...,
):
    """
    Updates a topic
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/{spaceId}/topic/{topicId}/reply',
    description=""" Gets a number of Space replies
OauthScopes: READ_SPACE """,
    tags=['space_reply_handling', 'conversation_search', 'topic_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_space_replies(
    space_id: constr(max_length=2048) = Path(..., alias='spaceId'),
    topic_id: constr(max_length=2048) = Path(..., alias='topicId'),
    search_direction: SearchDirection = Query(..., alias='searchDirection'),
    timestamp: Optional[datetime] = None,
    number_of_results: Optional[confloat(ge=0.0, le=255.0)] = Query(
        25, alias='numberOfResults'
    ),
):
    """
    Gets space replies
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/spaces/{spaceId}/topic/{topicId}/reply',
    description=""" creates a reply to a topic
OauthScopes: WRITE_SPACE """,
    tags=[
        'topic_handling',
        'space_reply_handling',
        'community_conversation_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_reply(
    space_id: constr(max_length=2048) = Path(..., alias='spaceId'),
    topic_id: constr(max_length=2048) = Path(..., alias='topicId'),
    request: Request = ...,
):
    """
    creates a reply to a topic
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/spaces/{spaceId}/topic/{topicId}/reply/{replyId}',
    description=""" Updates a space reply
OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT """,
    tags=['space_reply_handling', 'topic_handling', 'conversation_item_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_space_reply(
    space_id: constr(max_length=2048) = Path(..., alias='spaceId'),
    topic_id: constr(max_length=2048) = Path(..., alias='topicId'),
    reply_id: constr(max_length=2048) = Path(..., alias='replyId'),
    request: Request = ...,
):
    """
    Updates a space reply
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/spaces/{spaceId}/topics',
    description=""" Gets a number of Space topics
OauthScopes: READ_SPACE """,
    tags=['space_search', 'topic_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_space_topics(
    space_id: constr(max_length=2048) = Path(..., alias='spaceId'),
    search_direction: SearchDirection = Query(..., alias='searchDirection'),
    timestamp: Optional[datetime] = None,
    number_of_results: Optional[confloat(ge=0.0, le=255.0)] = Query(
        25, alias='numberOfResults'
    ),
):
    """
    Gets space topics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/spaces/{spaceId}/welcomebox/{content}',
    description=""" Update content of the welcome box of a space
OauthScopes: MANAGE_SPACE, WRITE_SPACE """,
    tags=['space_operations', 'space_interaction'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def v2_update_welcome_box_content(
    space_id: constr(max_length=2048) = Path(..., alias='spaceId'),
    content: constr(max_length=2048) = ...,
    request: Request = ...,
):
    """
    Update content of welcome box
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/spaces/{topicId}/pin',
    description=""" Pin a topic
OauthScopes: WRITE_SPACE, MANAGE_SPACE """,
    tags=['conversation_pinning', 'topic_pin_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def pin_topic(
    topic_id: constr(max_length=2048) = Path(..., alias='topicId'),
    request: Request = ...,
):
    """
    Pin a topic
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/spaces/{topicId}/unpin',
    description=""" Unpin a topic
OauthScopes: WRITE_SPACE, MANAGE_SPACE """,
    tags=['conversation_pinning', 'topic_handling', 'topic_pin_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def unpin_topic(topic_id: constr(max_length=2048) = Path(..., alias='topicId')):
    """
    Unpin a topic
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/telephony/deviceInfos',
    description=""" Get the device infos of the requesting user
OauthScopes: READ_USER_PROFILE """,
    tags=['device_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def v2_get_device_infos():
    """
    Get devices infos
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/telephony/telephonyConversationId',
    description=""" Get telephony conversation id for requesting client
OauthScopes: READ_CONVERSATIONS """,
    tags=['conversation_management', 'device_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def v2_get_telephony_conversation_id():
    """
    Get telephony conversation id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/telephony/{telephonyConversationId}/journal',
    description=""" Get telephony journal
OauthScopes: READ_CONVERSATIONS """,
    tags=['journal_management', 'device_info_retrieval', 'conversation_item_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_journal_entries(
    telephony_conversation_id: constr(max_length=2048) = Path(
        ..., alias='telephonyConversationId'
    ),
    timestamp: Optional[confloat(ge=0.0, le=9.223372036854776e18)] = 0,
    number_of_entries: Optional[confloat(ge=1.0, le=100.0)] = Query(
        25, alias='numberOfEntries'
    ),
    direction: Optional[Direction4] = 'AFTER',
    journal_filter: Optional[JournalFilter] = Query('ALL', alias='journalFilter'),
):
    """
    Get journal
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users',
    description=""" Search for users based on an email address or username
OauthScopes: READ_USER """,
    tags=['user_labeling_and_search', 'directory_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_user(name: constr(max_length=2048)):
    """
    Search for users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/labels',
    description=""" Returns all labels of the user that were defined either explicit or implicit via assignment to conversations.
OauthScopes: READ_USER_PROFILE, ORGANIZE_CONVERSATIONS """,
    tags=['user_labeling_and_search'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_label():
    """
    Returns all user labels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/labels',
    description=""" Add a label to the list of user labels
OauthScopes: WRITE_USER_PROFILE, ORGANIZE_CONVERSATIONS """,
    tags=['label_assignment_management', 'user_labeling_and_search'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_label(request: Request):
    """
    Add a user label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/labels/{labelId}',
    description=""" Remove a label from the list of user labels
OauthScopes: WRITE_USER_PROFILE, ORGANIZE_CONVERSATIONS """,
    tags=['label_assignment_management', 'user_labeling_and_search'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_label(label_id: constr(max_length=2048) = Path(..., alias='labelId')):
    """
    Remove a user label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/list',
    description=""" Search multiple users given by id or email address.
OauthScopes: READ_USER """,
    tags=['user_labeling_and_search', 'user_profile_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_users_list(
    name: Name,
    return_full_user_info: Optional[bool] = Query(False, alias='returnFullUserInfo'),
    secondary_lookup: Optional[bool] = Query(False, alias='secondaryLookup'),
):
    """
    Search multiple users.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/presence',
    description=""" Gets the presence status of the users whose IDs or email addresses are given.
OauthScopes: READ_USER """,
    tags=['user_presence_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_presence(user_ids: UserIds = Query(..., alias='userIds')):
    """
    Gets the presence status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/presence',
    description=""" Updates the presence status of the authenticated user.
OauthScopes: WRITE_USER_PROFILE, MANAGE_PRESENCE """,
    tags=['user_presence_handling', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_user_presence(request: Request):
    """
    Updates the presence status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/profile',
    description=""" Gets the authenticated user's profile information.
OauthScopes: READ_USER_PROFILE """,
    tags=['user_profile_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_profile():
    """
    Gets the authenticated user's profile information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/profile',
    description=""" Updates the user profile of the authenticated user
OauthScopes: WRITE_USER_PROFILE """,
    tags=['user_profile_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_profile(request: Request):
    """
    Updates the user profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/supportinfo',
    description=""" Gets the support information for the tenant of the requesting user
OauthScopes: READ_USER_PROFILE """,
    tags=[
        'conversation_management',
        'conversation_item_retrieval',
        'conversation_search',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_support_info():
    """
    Gets the support information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{emailAddress}/getUserByEmail',
    description=""" Get user by first or secondary email address
OauthScopes: READ_USER_PROFILE """,
    tags=['user_profile_operations', 'user_labeling_and_search'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_user_by_email_address(
    email_address: constr(max_length=2048) = Path(..., alias='emailAddress'),
    secondary_lookup: Optional[bool] = Query(None, alias='secondaryLookup'),
):
    """
    Get user by email
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id}',
    description=""" Gets the profile information of the user with the given ID.
OauthScopes: READ_USER """,
    tags=['user_profile_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_user_by_id(id: constr(max_length=2048)):
    """
    Gets the user's profile information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id}/presence',
    description=""" Gets the presence status of the users whose ID or email address is given.
OauthScopes: READ_USER """,
    tags=['user_presence_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_user_presence(id: constr(max_length=2048)):
    """
    Gets the presence status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/webhooks',
    description=""" Unregisters all webHooks of the authenticated user
OauthScopes: READ_CONVERSATIONS, READ_USER """,
    tags=['webhook_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_web_hooks():
    """
    Removes all webHooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhooks',
    description=""" Gets the list of webHooks registered for this user or API.
OauthScopes: READ_CONVERSATIONS, READ_USER """,
    tags=['webhook_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_web_hook():
    """
    Gets a list of webHooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks',
    description=""" Registers the webHook with the given filter and callback URL.
OauthScopes: READ_CONVERSATIONS, READ_USER """,
    tags=['webhook_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_web_hook(request: Request):
    """
    Registers a WebHook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks/incoming/create/{conversationId}',
    description=""" Create a new webhook. Conversation must exist and creater has to be participant.
OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS """,
    tags=['webhook_operations', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_incoming_webhook(
    conversation_id: constr(max_length=2048) = Path(..., alias='conversationId'),
    name: Optional[constr(max_length=2048)] = None,
    user_id: Optional[constr(max_length=2048)] = Query(None, alias='userId'),
    description: Optional[constr(max_length=2048)] = None,
):
    """
    Create a new webhook for existing conversation.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhooks/incoming/user/{userId}',
    description=""" Get all webhooks of a special user.
OauthScopes: READ_CONVERSATIONS, MANAGE_CONVERSATIONS """,
    tags=['webhook_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_incoming_webhook_by_user(
    user_id: constr(max_length=2048) = Path(..., alias='userId'),
    pagesize: Optional[confloat(ge=1.0, le=100.0)] = 25,
    searchpointer: Optional[constr(max_length=2048)] = None,
):
    """
    Get all webhooks of a special user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/webhooks/incoming/{webhookId}',
    description=""" Delete a new webhook. Webhook must exist
OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS """,
    tags=['webhook_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_incoming_webhook(
    webhook_id: constr(max_length=2048) = Path(..., alias='webhookId')
):
    """
    Delete an existing webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks/incoming/{webhookId}',
    description=""" Post text items to conversations via slack apps. """,
    tags=['conversation_item_management', 'webhook_operations'],
)
def post_webhook_as_slack_message(
    webhook_id: constr(max_length=2048) = Path(..., alias='webhookId'),
    request: Request = ...,
):
    """
    Post text item for conversation via webhook.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks/presence',
    description=""" Registers a webHook that has a presence filter with the given URL and userIds. There is a maximum number of userIds allowed
OauthScopes: READ_USER """,
    tags=['webhook_operations', 'user_presence_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_presence_web_hook(request: Request):
    """
    Registers Presence WebHook registration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/webhooks/presence/{id}',
    description=""" Updates a registration of a webHook that has a presence filter. The update can be performed either on the URL and/or the userIds. The new userIds, if any, will override any existing userIds.
OauthScopes: READ_USER """,
    tags=['webhook_operations', 'user_presence_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_presence_web_hook(id: constr(max_length=2048), request: Request = ...):
    """
    Updates a Presence WebHook registration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/webhooks/{id}',
    description=""" Unregisters the webHook with the given ID.
OauthScopes: READ_CONVERSATIONS, READ_USER """,
    tags=['webhook_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_web_hook(id: constr(max_length=2048)):
    """
    Removes a registered webHook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhooks/{id}',
    description=""" Gets the registered webHook with the given ID.
OauthScopes: READ_CONVERSATIONS, READ_USER """,
    tags=['webhook_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_web_hook_by_id(id: constr(max_length=2048)):
    """
    Gets a webHook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/webhooks/{id}',
    description=""" Updates a webHook registration with the given filter and callback URL.
OauthScopes: READ_CONVERSATIONS, READ_USER """,
    tags=['webhook_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_web_hook(id: constr(max_length=2048), request: Request = ...):
    """
    Updates a WebHook registration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
